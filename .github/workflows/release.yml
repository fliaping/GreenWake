name: Greenwake Guard Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        working-directory: greenwake-guard
          
      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install create-dmg
        run: brew install create-dmg
        
      - name: Build macOS App
        run: |
          cd greenwake-guard
          chmod +x script/macos/build.sh
          ./script/macos/build.sh
          
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: greenwake-guard/build/macos/GreenwakeGuard.dmg
          
  build-windows:
    strategy:
      matrix:
        arch: [amd64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        shell: bash
        working-directory: greenwake-guard

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-
          
      - name: Install Inno Setup
        run: |
          $installer = "innosetup-6.2.2.exe"
          Invoke-WebRequest "https://files.jrsoftware.org/is/6/$installer" -OutFile $installer
          Start-Process -FilePath .\$installer -Args "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait
          
      - name: Build Windows App
        env:
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          GOOS: windows
          GO111MODULE: on
        run: |
          cd greenwake-guard
          mkdir -p build/windows
          go build -ldflags "-s -w -H=windowsgui -X main.Version=$env:VERSION" -o build/windows/greenwake-guard.exe ./cmd/guard
          powershell -ExecutionPolicy Bypass -File script/windows/build.ps1
        shell: bash
          
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: greenwake-guard/build/windows/GreenwakeGuard_Setup_*.exe
          
  build-linux:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        working-directory: greenwake-guard

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-

      - name: Install dependencies
        run: |
          sudo sed -i 's/noble/jammy/g' /etc/apt/sources.list
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y build-essential rpm dpkg-dev pkg-config
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libc6-dev-arm64-cross \
              libgl1-mesa-dev:arm64 \
              libx11-dev:arm64 \
              libxcursor-dev:arm64 \
              libxrandr-dev:arm64 \
              libxinerama-dev:arm64 \
              libxi-dev:arm64 \
              libxxf86vm-dev:arm64
          else
            sudo apt-get install -y \
              libgl1-mesa-dev \
              libx11-dev \
              libxcursor-dev \
              libxrandr-dev \
              libxinerama-dev \
              libxi-dev \
              libxxf86vm-dev
          fi

      - name: Build Linux App
        env:
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-gcc' || 'gcc' }}
          CXX: ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-g++' || 'g++' }}
          PKG_CONFIG_PATH: ${{ matrix.arch == 'arm64' && '/usr/lib/aarch64-linux-gnu/pkgconfig' || '/usr/lib/x86_64-linux-gnu/pkgconfig' }}
          CGO_CFLAGS: ${{ matrix.arch == 'arm64' && '-I/usr/aarch64-linux-gnu/include' || '' }}
          CGO_LDFLAGS: ${{ matrix.arch == 'arm64' && '-L/usr/aarch64-linux-gnu/lib' || '' }}
        run: |
          cd greenwake-guard
          chmod +x script/linux/build.sh
          ./script/linux/build.sh

      - name: Upload DEB Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb-${{ matrix.arch }}
          path: greenwake-guard/build/linux/greenwake-guard_*_${{ matrix.arch }}.deb

      - name: Upload RPM Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-rpm-${{ matrix.arch }}
          path: greenwake-guard/build/linux/greenwake-guard-*.${{ matrix.arch }}.rpm

      - name: Upload Shell Installer
        uses: actions/upload-artifact@v4
        with:
          name: linux-shell-${{ matrix.arch }}
          path: greenwake-guard/build/linux/GreenwakeGuard_*_${{ matrix.arch }}.sh
          
  create-release:
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD > CHANGELOG.md
          fi
          
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
          pattern: |
            macos-universal
            windows-*
            linux-*
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Greenwake Guard ${{ env.VERSION }}
          body_path: CHANGELOG.md
          files: |
            artifacts/macos-universal/GreenwakeGuard.dmg
            artifacts/windows-amd64/GreenwakeGuard_Setup_*.exe
            # artifacts/windows-arm64/GreenwakeGuard_Setup_*.exe
            artifacts/linux-deb-amd64/greenwake-guard_*.deb
            artifacts/linux-deb-arm64/greenwake-guard_*.deb
            artifacts/linux-rpm-amd64/greenwake-guard-*.rpm
            artifacts/linux-rpm-arm64/greenwake-guard-*.rpm
            artifacts/linux-shell-amd64/GreenwakeGuard_*.sh
            artifacts/linux-shell-arm64/GreenwakeGuard_*.sh
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 